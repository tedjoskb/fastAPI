"""fix relationships

Revision ID: f913fdd86cfb
Revises: 3fac373a2234
Create Date: 2023-08-24 09:59:53.424454

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa


# revision identifiers, used by Alembic.
revision: str = 'f913fdd86cfb'
down_revision: Union[str, None] = '3fac373a2234'
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_index('ix_Address_id', table_name='Address')
    op.drop_table('Address')
    op.alter_column('address', 'address1',
               existing_type=sa.VARCHAR(),
               nullable=True)
    op.alter_column('address', 'address2',
               existing_type=sa.VARCHAR(),
               nullable=True)
    op.alter_column('address', 'city',
               existing_type=sa.VARCHAR(),
               nullable=True)
    op.alter_column('address', 'state',
               existing_type=sa.VARCHAR(),
               nullable=True)
    op.alter_column('address', 'country',
               existing_type=sa.VARCHAR(),
               nullable=True)
    op.alter_column('address', 'postalcode',
               existing_type=sa.VARCHAR(),
               nullable=True)
    op.create_index(op.f('ix_address_id'), 'address', ['id'], unique=False)
    op.create_index(op.f('ix_todos_id'), 'todos', ['id'], unique=False)
    op.create_index(op.f('ix_users_email'), 'users', ['email'], unique=True)
    op.create_index(op.f('ix_users_id'), 'users', ['id'], unique=False)
    op.create_index(op.f('ix_users_username'), 'users', ['username'], unique=True)
    op.drop_constraint('address_users_fk', 'users', type_='foreignkey')
    op.create_foreign_key(None, 'users', 'address', ['address_id'], ['id'])
    op.drop_column('users', 'role')
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.add_column('users', sa.Column('role', sa.VARCHAR(length=45), server_default=sa.text('NULL::character varying'), autoincrement=False, nullable=True))
    op.drop_constraint(None, 'users', type_='foreignkey')
    op.create_foreign_key('address_users_fk', 'users', 'address', ['address_id'], ['id'], ondelete='CASCADE')
    op.drop_index(op.f('ix_users_username'), table_name='users')
    op.drop_index(op.f('ix_users_id'), table_name='users')
    op.drop_index(op.f('ix_users_email'), table_name='users')
    op.drop_index(op.f('ix_todos_id'), table_name='todos')
    op.drop_index(op.f('ix_address_id'), table_name='address')
    op.alter_column('address', 'postalcode',
               existing_type=sa.VARCHAR(),
               nullable=False)
    op.alter_column('address', 'country',
               existing_type=sa.VARCHAR(),
               nullable=False)
    op.alter_column('address', 'state',
               existing_type=sa.VARCHAR(),
               nullable=False)
    op.alter_column('address', 'city',
               existing_type=sa.VARCHAR(),
               nullable=False)
    op.alter_column('address', 'address2',
               existing_type=sa.VARCHAR(),
               nullable=False)
    op.alter_column('address', 'address1',
               existing_type=sa.VARCHAR(),
               nullable=False)
    op.create_table('Address',
    sa.Column('id', sa.INTEGER(), server_default=sa.text('nextval(\'"Address_id_seq"\'::regclass)'), autoincrement=True, nullable=False),
    sa.Column('address1', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('address2', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('city', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('state', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('country', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('postalcode', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('id', name='Address_pkey')
    )
    op.create_index('ix_Address_id', 'Address', ['id'], unique=False)
    # ### end Alembic commands ###
